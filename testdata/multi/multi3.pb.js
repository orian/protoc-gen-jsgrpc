// Code generated by protoc-gen-jsgrpc.
// source: multi/multi3.proto
// DO NOT EDIT!

goog.provide('multitest.Multi3');
goog.provide('multitest.Multi3.HatType');
goog.provide('multitest.Multi3.HatTypeNames');

goog.require('goog.proto2.Message');



/**
 * @enum {number}
 */
multitest.Multi3.HatType = {
  FEDORA: 1,
  FEZ: 2
};

multitest.Multi3.HatTypeNames = {
  1: "FEDORA",
  2: "FEZ"
};

/**
 * Message multitest.Multi3.
 * @constructor
 * @extends {goog.proto2.Message}
 * @final
 */
multitest.Multi3 = function () {
  goog.proto2.Message.call(this);
};
goog.inherits(multitest.Multi3, goog.proto2.Message);

/**
 * Sets the value of the hat_type field.
 * @param {multitest.Multi3.HatType} value The value.
 */
multitest.Multi3.prototype.setHatType = function(value) {
  this.set$Value(1, value);
};

/**
 * Gets the value of the hat_type field.
 * @return {?multitest.Multi3.HatType} The value.
 */
multitest.Multi3.prototype.getHatType = function() {
  return /** @type {?multitest.Multi3.HatType} */ (this.get$Value(1));
};

/** @override */
multitest.Multi3.prototype.getDescriptor = function() {
  if (!multitest.Multi3.descriptor_) {
    // The descriptor is created lazily when we instantiate a new instance.
    var descriptorObj = {
      0: {
        name: 'Multi3',
        fullName: 'multitest.Multi3'
      },
      1: {
        name: 'hat_type',
        fieldType: goog.proto2.Message.FieldType.ENUM,
        type: multitest.Multi3.HatType
      }
    };
    multitest.Multi3.descriptor_ = goog.proto2.Message.createDescriptor(multitest.Multi3, descriptorObj);
  }
  return multitest.Multi3.descriptor_;
};

